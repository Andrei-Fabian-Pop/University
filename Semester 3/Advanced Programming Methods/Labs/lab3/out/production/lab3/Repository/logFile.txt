Execution stack:
NopStatement
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
Close(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}
Declaration{varF: string}

Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 0

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 15

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 15

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 50

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:
NopStatement

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}
Declaration{v: Int}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
;
Print{VariableExpression{b}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
;
Print{VariableExpression{b}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{a: Int};
Declaration{b: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}
Declaration{a: Int}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}

Symbol Table:
a: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}

Symbol Table:
a: 0
b: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}

Symbol Table:
a: 17
b: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}

Symbol Table:
a: 17
b: 18

Out:

Execution stack:
NopStatement

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
;
Print{VariableExpression{v}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{a: Bool};
Declaration{v: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}
Declaration{a: Bool}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}

Symbol Table:
a: false

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}

Symbol Table:
a: false
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}

Symbol Table:
a: true
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
a: true
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
a: true
v: 2

Out:

Execution stack:
NopStatement

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
Close(r) file {VariableExpression{varF}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
Close(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}
Declaration{varF: string}

Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 0

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 15

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 15

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 50

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:
NopStatement

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}
Declaration{v: Int}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
;
Print{VariableExpression{b}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
;
Print{VariableExpression{b}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{a: Int};
Declaration{b: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}
Declaration{a: Int}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}

Symbol Table:
a: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}

Symbol Table:
a: 0
b: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}

Symbol Table:
a: 17
b: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}

Symbol Table:
a: 17
b: 18

Out:

Execution stack:
NopStatement

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
;
Print{VariableExpression{v}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{a: Bool};
Declaration{v: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}
Declaration{a: Bool}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}

Symbol Table:
a: false

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}

Symbol Table:
a: false
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}

Symbol Table:
a: true
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
a: true
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
a: true
v: 2

Out:

Execution stack:
NopStatement

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
Close(r) file {VariableExpression{varF}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
Close(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}
Declaration{varF: string}

Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 0

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 15

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 15

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 50

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:
NopStatement

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Declaration{v: Int};
Assignment{v = ValueExpression{2}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}
Declaration{v: Int}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:

Symbol Table:
v: 2

Out:
2
2
2

Execution stack:
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
;
Print{VariableExpression{b}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
;
Print{VariableExpression{b}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
;
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Declaration{a: Int};
Declaration{b: Int}
;
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{a: Int};
Declaration{b: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}
Declaration{a: Int}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}

Symbol Table:
a: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}

Symbol Table:
a: 0
b: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}

Symbol Table:
a: 17
b: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{b}}

Symbol Table:
a: 17
b: 18

Out:

Execution stack:
NopStatement

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:

Symbol Table:
a: 17
b: 18

Out:
18

Execution stack:
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
;
Print{VariableExpression{v}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
;
Print{VariableExpression{v}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}
;
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Declaration{a: Bool};
Declaration{v: Int}
;
Assignment{a = ValueExpression{true}}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{a: Bool};
Declaration{v: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}
Declaration{a: Bool}

Symbol Table:

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}

Symbol Table:
a: false

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}

Symbol Table:
a: false
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}

Symbol Table:
a: true
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
a: true
v: 0

Out:

Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
a: true
v: 2

Out:

Execution stack:
NopStatement

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:

Symbol Table:
a: true
v: 2

Out:
2

Execution stack:
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
Close(r) file {VariableExpression{varF}}
;
NopStatement


Symbol Table:

Out:

Execution stack:
NopStatement
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
Close(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}
;
Print{VariableExpression{x}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}
;
ReadFile {VariableExpression{varF}: x}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}
;
Declaration{x: Int}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}
;
Open(r) file {VariableExpression{varF}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Declaration{varF: string};
Assignment{varF = ValueExpression{test.in}}


Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}
Declaration{varF: string}

Symbol Table:

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}

Symbol Table:
varF: test.in

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 0

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 15

Out:

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 15

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 50

Out:
15

Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:
NopStatement

Symbol Table:
varF: test.in
x: 50

Out:
15
50

Execution stack:

Symbol Table:
varF: test.in
x: 50

Out:
15
50

